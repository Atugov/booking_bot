name: Deploy to Raspberry Pi

on:
  push:
    branches:
      - release

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker image
        run: |
          IMAGE_TAG="ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/telegram-bot:${{ github.sha }}"
          docker buildx build --platform linux/arm64 -t $IMAGE_TAG --load .
          echo $IMAGE_TAG

      - name: Push Docker image to GHCR
        run: |
          IMAGE_TAG="ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/telegram-bot:${{ github.sha }}"
          docker push $IMAGE_TAG

      # Enable Tailscale for secure SSH access
      - name: Connect to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to Raspberry Pi via SSH (Tailscale IP)
        run: |
          IMAGE_TAG="ghcr.io/$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')/telegram-bot:${{ github.sha }}"
          sshpass -p "${{ secrets.RPI_PASSWORD }}" ssh -o StrictHostKeyChecking=no -l "${{ secrets.RPI_USER }}" "${{ secrets.RPI_IP }}" << EOF
            echo "Logging in to GHCR..."
            echo "${{ secrets.GHCR_TOKEN }}" | sudo docker login ghcr.io -u $USER --password-stdin
          
            echo "Pulling latest image..."
            sudo docker pull $IMAGE_TAG
            
            echo "Stopping existing container..."
            sudo docker stop telegram-bot || true
            
            echo "Removing old container..."
            sudo docker rm telegram-bot || true
            
            echo "Running new container..."
            sudo docker run -d --restart unless-stopped --name telegram-bot \
              -e BOT_TOKEN="${{ secrets.BOT_TOKEN }}" \
              -e BOT_USERNAME="${{ secrets.BOT_USERNAME }}" \
              -e SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
              -e SUPABASE_KEY="${{ secrets.SUPABASE_KEY }}" \
              $IMAGE_TAG
          EOF
